package groupProject;

import javafx.application.Application;
import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.collections.*;
import javafx.scene.shape.*;

import java.sql.*;
import oracle.jdbc.pool.*;
import java.util.*;


public class part2FX extends Application {
    
    Stage primaryStage = new Stage();
    Stage employeeStage = new Stage();
    Stage guestStage = new Stage();
    Scene mainScene, employeeScene, guestScene;
    public static ObservableList roomList = FXCollections.observableArrayList();
    public ListView addRoomList = new ListView(roomList);
    public static ObservableList freeList = FXCollections.observableArrayList();
    public ListView freeRoomList = new ListView(freeList);
    
    
    //GridPane textPane = new GridPane();
    
    //login btns, fields, lbls
    TextField txtUsername = new TextField();
    TextField txtPassword = new TextField();
    TextArea Error = new TextArea();
    Button btnLogin = new Button("  Login ->  ");
    Button userPassword = new Button();
    Label lblUsername = new Label("Username: ");
    Label lblPassword = new Label("Password: ");
    
    ObservableList<String> options = 
            FXCollections.observableArrayList
            (
                "Employee",
                "Guest"   
            );
    final ComboBox comboBox = new ComboBox(options);
    
    //employee btns, fields, lbls
    Label lblBed = new Label("Bed: ");
    Label lblKich = new Label("Kitch: ");
    Label lblCoffee = new Label("Coffee: ");
    Label lblAccess = new Label("Accessibility: ");
    Label lblRoomNum = new Label("Room Number: ");
    Button addRoom = new Button("  Add Room ->  ");
    Button btnEmployeeLogout = new Button("  Logout  ");
    TextField txtRoomNum = new TextField();
    ObservableList<String> bedOptions =
            FXCollections.observableArrayList
            (
                "1 Queen Bed",
                "Queen Beds",
                "1 King Bed"
            );
    final ComboBox bedComboBox = new ComboBox(bedOptions);
    
    ObservableList<String> kitchOptions =
            FXCollections.observableArrayList
            (
                "Microwave",
                "Fridge/Microwave"
            );
    final ComboBox kitchComboBox = new ComboBox(kitchOptions);
    
    ObservableList<String> coffeeOptions =
            FXCollections.observableArrayList
            (
                "1 Cup Standard Coffee Machine",
                "Keurig Hot K200 Machine"
            );
    final ComboBox coffeeComboBox = new ComboBox(coffeeOptions);
    
    ObservableList<String> accessOptions =
            FXCollections.observableArrayList
            (
                "Standard Room",
                "Enhanced Accessibility Room"
            );
    final ComboBox accessComboBox = new ComboBox(accessOptions);
    
    //guest btns, fields, lbls
    Label lblCheckYear = new Label("Check in Year: ");
    Label lblCheckIn = new Label("Check in Day: ");
    Label lblCheckOut = new Label("Check out Day: ");
    Label lblFreeRooms = new Label("Free Rooms: ");
    TextField txtCheckYear = new TextField();
    TextField txtCheckIn = new TextField();
    TextField txtCheckOut = new TextField();
    Button bookRoom = new Button("  Book Room  ");
    Button btnGuestLogout = new Button("  Logout  ");
    
    
//    public TabPane tpTabs = new TabPane();
//    public Tab tabAddItems = new Tab("Add Room");
//    public Tab tabBuildOrder = new Tab("Build Order");
    
    Connection dbConn;
    Statement commStmt;
    ResultSet dbResults;
    
    @Override
    public void start(Stage primaryStage) {
        GridPane primaryPane = new GridPane();
        Scene mainScene = new Scene(primaryPane, 400, 200);
        primaryStage.setScene(mainScene);
        primaryStage.setTitle("Madison Hotel Login");
        primaryStage.show();
       // btnLogin.setOnAction(e -> primaryPane.setScene(employeeScene));
         
        btnLogin.setOnAction(e ->{
            if(comboBox.equals ("Employee"))
            {
                
            }
            else if(comboBox.equals ("Guest"))
            {
                
            }
            else
            {
//                Error.setText("You must select an option");
                
            }
            
        });
        
        
        
        
        primaryPane.setAlignment(Pos.CENTER);
        //primaryPane.add(new Label("Add Items to our Menu:"), 0, 0);
        primaryPane.add(lblUsername, 0, 0);
//        primaryPane.add(txtDesc, 1, 1);
        primaryPane.add(lblPassword, 0, 1);
        primaryPane.add(txtUsername, 1, 0 );
        primaryPane.add(txtPassword, 1, 1);
        primaryPane.add(btnLogin, 1, 3);
        primaryPane.add(comboBox, 1, 2);
//        primaryPane.add(Error, 1, 4);
//        primaryPane.add(txtPrice, 1, 2);
//        primaryPane.add(btnAddNewItem, 1, 3);
//        primaryPane.add(lstItemsList, 2, 1, 1, 3);


        
        
    }
    public void employeeWindow (Stage employeeStage) {
        GridPane employeePane = new GridPane();
        Scene employeeScene = new Scene(employeePane, 800, 400);
        employeeStage.setScene(employeeScene);
        employeeStage.setTitle("Employee View: ");
        employeeStage.show();
        employeePane.setAlignment(Pos.CENTER);
    }
        
                
    public void guestWindow (Stage guestStage){ 
        GridPane guestPane = new GridPane();
        Scene guestScene = new Scene(guestPane, 800, 400);
        guestStage.setScene(guestScene);
        guestStage.setTitle("Guest View: ");
        guestStage.show();
        guestPane.setAlignment(Pos.CENTER);
    }
    
    public static void main(String[] args) {
        launch(args);
        
    ArrayList<Guest> Guests = new ArrayList<Guest>();
    ArrayList<Booking> Bookings = new ArrayList<Booking>();
    ArrayList<Employee> Employees = new ArrayList<Employee>();
    ArrayList<Room> Rooms = new ArrayList<Room>();
    ArrayList<valueGuest> valueGuests = new ArrayList<valueGuest>();
    Guest currentGuest;
    Employee currentEmployee;
    char UserType;
    Scanner in = new Scanner(System.in);
        
        Employee employee1 = new Employee("Matt", "password", "Matt Dreyer");
        Employees.add(employee1);
        Employee employee2 = new Employee("Hannah", "password", "Hannah Ford");
        Employees.add(employee2);
        Guest guest1 = new Guest("Benji", "password", "Benji Ford");
        Guests.add(guest1);
        Guest guest2 = new Guest("Brad", "password", "Brad Pitt");
        Guests.add(guest2);
        valueGuest valueGuest1 = new valueGuest("Bob", "password", "Bob Smith");
        valueGuests.add(valueGuest1);
        Room room1 = new Room(1, 1, 1, 1, 75);
        Rooms.add(room1);
        Room room2 = new Room(1, 1, 1, 75, 100);
        Rooms.add(room2);
        Room room3 = new Room(2, 2, 2, 100, 101);
        Rooms.add(room3);
        Room room4 = new Room(3, 1, 1, 100, 102);
        Rooms.add(room4);
        Room room5 = new Room(1, 2, 2, 150, 103);
        Rooms.add(room5);
           
    }
    
    
    public void sendDBCommand(String sqlQuery)
    {
        // Set up your connection strings
        // IF YOU ARE IN CIS330 NOW: use YOUR Oracle Username/Password
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; // Change to YOUR Oracle username
        String userPASS = "javapass"; // Change to YOUR Oracle password
        OracleDataSource ds;
        
        // Clear Box Testing - Print each query to check SQL syntax
        //  sent to this method.
        // You can comment this line out when your program is finished
        System.out.println(sqlQuery);
        
        // Lets try to connect
        try
        {
            // instantiate a new data source object
            ds = new OracleDataSource();
            // Where is the database located? Web? Local?
            ds.setURL(URL);
            // Send the user/pass and get an open connection.
            dbConn = ds.getConnection(userID,userPASS);
            // When we get results
            //  -TYPE_SCROLL_SENSITIVE means if the database data changes we
            //   will see our resultset update in real time.
            //  -CONCUR_READ_ONLY means that we cannot accidentally change the
            //   data in our database by using the .update____() methods of
            //   the ResultSet class - TableView controls are impacted by
            //   this setting as well.
            commStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            // We send the query to the DB. A ResultSet object is instantiated
            //  and we are returned a reference to it, that we point to from
            // dbResults.
            // Because we declared dbResults at the datafield level
            // we can see the results from anywhere in our Class.
            dbResults = commStmt.executeQuery(sqlQuery); // Sends the Query to the DB
            // The results are stored in a ResultSet structure object
            // pointed to by the reference variable dbResults
            // Because we declared this variable globally above, we can use
            // the results in any method in the class.

               
          
        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }
        
    }
    
}
